# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.blood_station_geo_data import BloodStationGeoData
from swagger_server.models.blood_station_week_working_hours import BloodStationWeekWorkingHours
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class BloodStation(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, full_name=None, short_name=None, week_working_hours=None, clarification_working_hours=None, public_phone=None, geo_data=None):
        """
        BloodStation - a model defined in Swagger

        :param id: The id of this BloodStation.
        :type id: int
        :param full_name: The full_name of this BloodStation.
        :type full_name: str
        :param short_name: The short_name of this BloodStation.
        :type short_name: str
        :param week_working_hours: The week_working_hours of this BloodStation.
        :type week_working_hours: List[BloodStationWeekWorkingHours]
        :param clarification_working_hours: The clarification_working_hours of this BloodStation.
        :type clarification_working_hours: str
        :param public_phone: The public_phone of this BloodStation.
        :type public_phone: str
        :param geo_data: The geo_data of this BloodStation.
        :type geo_data: List[BloodStationGeoData]
        """
        self.swagger_types = {
            'id': int,
            'full_name': str,
            'short_name': str,
            'week_working_hours': List[BloodStationWeekWorkingHours],
            'clarification_working_hours': str,
            'public_phone': str,
            'geo_data': List[BloodStationGeoData]
        }

        self.attribute_map = {
            'id': 'id',
            'full_name': 'FullName',
            'short_name': 'ShortName',
            'week_working_hours': 'WeekWorkingHours',
            'clarification_working_hours': 'ClarificationWorkingHours',
            'public_phone': 'PublicPhone',
            'geo_data': 'GeoData'
        }

        self._id = id
        self._full_name = full_name
        self._short_name = short_name
        self._week_working_hours = week_working_hours
        self._clarification_working_hours = clarification_working_hours
        self._public_phone = public_phone
        self._geo_data = geo_data

    @classmethod
    def from_dict(cls, dikt):
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BloodStation of this BloodStation.
        :rtype: BloodStation
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self):
        """
        Gets the id of this BloodStation.

        :return: The id of this BloodStation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BloodStation.

        :param id: The id of this BloodStation.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def full_name(self):
        """
        Gets the full_name of this BloodStation.

        :return: The full_name of this BloodStation.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this BloodStation.

        :param full_name: The full_name of this BloodStation.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def short_name(self):
        """
        Gets the short_name of this BloodStation.

        :return: The short_name of this BloodStation.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """
        Sets the short_name of this BloodStation.

        :param short_name: The short_name of this BloodStation.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def week_working_hours(self):
        """
        Gets the week_working_hours of this BloodStation.

        :return: The week_working_hours of this BloodStation.
        :rtype: List[BloodStationWeekWorkingHours]
        """
        return self._week_working_hours

    @week_working_hours.setter
    def week_working_hours(self, week_working_hours):
        """
        Sets the week_working_hours of this BloodStation.

        :param week_working_hours: The week_working_hours of this BloodStation.
        :type week_working_hours: List[BloodStationWeekWorkingHours]
        """

        self._week_working_hours = week_working_hours

    @property
    def clarification_working_hours(self):
        """
        Gets the clarification_working_hours of this BloodStation.

        :return: The clarification_working_hours of this BloodStation.
        :rtype: str
        """
        return self._clarification_working_hours

    @clarification_working_hours.setter
    def clarification_working_hours(self, clarification_working_hours):
        """
        Sets the clarification_working_hours of this BloodStation.

        :param clarification_working_hours: The clarification_working_hours of this BloodStation.
        :type clarification_working_hours: str
        """

        self._clarification_working_hours = clarification_working_hours

    @property
    def public_phone(self):
        """
        Gets the public_phone of this BloodStation.

        :return: The public_phone of this BloodStation.
        :rtype: str
        """
        return self._public_phone

    @public_phone.setter
    def public_phone(self, public_phone):
        """
        Sets the public_phone of this BloodStation.

        :param public_phone: The public_phone of this BloodStation.
        :type public_phone: str
        """

        self._public_phone = public_phone

    @property
    def geo_data(self):
        """
        Gets the geo_data of this BloodStation.

        :return: The geo_data of this BloodStation.
        :rtype: List[BloodStationGeoData]
        """
        return self._geo_data

    @geo_data.setter
    def geo_data(self, geo_data):
        """
        Sets the geo_data of this BloodStation.

        :param geo_data: The geo_data of this BloodStation.
        :type geo_data: List[BloodStationGeoData]
        """

        self._geo_data = geo_data

